clear ; close all; clc

%% Load Data
% The first two columns contains the similarity of faces and difference of 
% pupillary distance and the third column contains the label.

data = load('dataCIS.txt');
X = data(:, [1, 2]); y = data(:, 3);

%% ==================== Part 1: Plotting ====================
%  We start the problem by first plotting the data to understand the 
%  the problem we are working with.

fprintf(['Plotting data with + indicating (are related) examples and o ' ...
         'indicating (not related) examples.\n']);

plotData(X, y);

hold on;
xlabel('similarity of faces')
ylabel('difference of pupillary distance')

legend('are related', 'not related')
hold off;

fprintf('\nProgram paused. Press enter to continue.\n');
pause;


%% ============ Part 2: Compute Cost and Gradient ============

%  Setup the data matrix appropriately, and add ones for the intercept term
[m, n] = size(X);

% Add intercept term to x and X_test
X = [ones(m, 1) X];

% Initialize fitting parameters
initial_theta = zeros(n + 1, 1);

% Compute and display initial cost and gradient
[cost, grad] = costFunction(initial_theta, X, y);

fprintf('Cost at initial theta (zeros): %f\n', cost);
fprintf('Gradient at initial theta (zeros): \n');
fprintf(' %f \n', grad);

% Compute and display cost and gradient with non-zero theta
%test_theta = [-24; 0.2; 0.2];
%[cost, grad] = costFunction(test_theta, X, y);

fprintf('\nCost at test theta: %f\n', cost);
fprintf('Gradient at test theta: \n');
fprintf(' %f \n', grad);

fprintf('\nProgram paused. Press enter to continue.\n');
pause;


%% ============= Part 3: Optimizing using fminunc  =============

%  Set options for fminunc
options = optimset('GradObj', 'on', 'MaxIter', 400);

%  Run fminunc to obtain the optimal theta
%  This function will return theta and the cost 
[theta, cost] = ...
	fminunc(@(t)(costFunction(t, X, y)), initial_theta, options);

% Print theta to screen
fprintf('Cost at theta found by fminunc: %f\n', cost);
fprintf('theta: \n');
fprintf(' %f \n', theta);

% Plot Boundary
plotDecisionBoundaryCIS(theta, X, y);

hold on;
xlabel('similarity of faces')
ylabel('difference of pupillary distance')

hold off;

fprintf('\nProgram paused. Press enter to continue.\n');
pause;

%% ============== Part 4: Predict and Accuracies ==============

%  Predict probability for a set of faces that is of similarity 0.8 and of    %  pupillary distance 0.1 

prob = sigmoid([1 0.8 0.1] * theta);
fprintf(['For a set with similarity 0.8 and pupillary distance 0.1, we predict an admission ' ...
         'probability of %f\n'], prob);

% Compute accuracy on our training set
p = predict(theta, X);

fprintf('Train Accuracy: %f\n', mean(double(p == y)) * 100);
fprintf('\n');
